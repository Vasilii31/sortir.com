<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="77" assertions="175" errors="0" warnings="0" failures="0" skipped="0" time="0.203646">
    <testsuite name="Unit" tests="77" assertions="175" errors="0" warnings="0" failures="0" skipped="0" time="0.203646">
      <testsuite name="App\Tests\Unit\Service\CleanupServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\CleanupServiceTest.php" tests="4" assertions="16" errors="0" warnings="0" failures="0" skipped="0" time="0.032247">
        <testcase name="testCleanupFinishedSortiesForInactiveParticipants" class="App\Tests\Unit\Service\CleanupServiceTest" classname="App.Tests.Unit.Service.CleanupServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\CleanupServiceTest.php" line="27" assertions="5" time="0.024774"/>
        <testcase name="testCancelOngoingSortiesForInactiveOrganizersSuccess" class="App\Tests\Unit\Service\CleanupServiceTest" classname="App.Tests.Unit.Service.CleanupServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\CleanupServiceTest.php" line="72" assertions="4" time="0.005693"/>
        <testcase name="testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule" class="App\Tests\Unit\Service\CleanupServiceTest" classname="App.Tests.Unit.Service.CleanupServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\CleanupServiceTest.php" line="113" assertions="3" time="0.000611"/>
        <testcase name="testCleanupFinishedSortiesWithZeroResults" class="App\Tests\Unit\Service\CleanupServiceTest" classname="App.Tests.Unit.Service.CleanupServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\CleanupServiceTest.php" line="138" assertions="4" time="0.001168"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\EtatServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\EtatServiceTest.php" tests="1" assertions="3" errors="0" warnings="0" failures="0" skipped="0" time="0.000681">
        <testcase name="testGetAllEtats" class="App\Tests\Unit\Service\EtatServiceTest" classname="App.Tests.Unit.Service.EtatServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\EtatServiceTest.php" line="22" assertions="3" time="0.000681"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" tests="13" assertions="19" errors="0" warnings="0" failures="0" skipped="0" time="0.027621">
        <testcase name="testGetUploadDirectory" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="28" assertions="1" time="0.001240"/>
        <testcase name="testIsValidImageFileWithValidJpeg" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="37" assertions="1" time="0.005472"/>
        <testcase name="testIsValidImageFileWithValidPng" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="51" assertions="1" time="0.000708"/>
        <testcase name="testIsValidImageFileWithValidWebp" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="65" assertions="1" time="0.000777"/>
        <testcase name="testIsValidImageFileWithTooLargeFile" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="79" assertions="1" time="0.000597"/>
        <testcase name="testIsValidImageFileWithInvalidMimeType" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="93" assertions="1" time="0.000565"/>
        <testcase name="testIsValidImageFileWithTextFile" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="107" assertions="1" time="0.000605"/>
        <testcase name="testUploadFileException" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="121" assertions="2" time="0.011111"/>
        <testcase name="testUploadSuccess" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="143" assertions="3" time="0.004037"/>
        <testcase name="testUploadWithOldFilenameDeletion" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="165" assertions="4" time="0.001892"/>
        <testcase name="testDeleteWithNullFilename" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="197" assertions="1" time="0.000228"/>
        <testcase name="testDeleteWithEmptyFilename" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="206" assertions="1" time="0.000205"/>
        <testcase name="testDeleteWithNonExistentFile" class="App\Tests\Unit\Service\ImageUploadServiceTest" classname="App.Tests.Unit.Service.ImageUploadServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ImageUploadServiceTest.php" line="215" assertions="1" time="0.000185"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" tests="5" assertions="8" errors="0" warnings="0" failures="0" skipped="0" time="0.016359">
        <testcase name="testRegisterParticipantSuccess" class="App\Tests\Unit\Service\InscriptionServiceTest" classname="App.Tests.Unit.Service.InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" line="36" assertions="2" time="0.011926"/>
        <testcase name="testRegisterParticipantWhenSortieNotOpen" class="App\Tests\Unit\Service\InscriptionServiceTest" classname="App.Tests.Unit.Service.InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" line="59" assertions="1" time="0.000937"/>
        <testcase name="testRegisterParticipantWhenAlreadyRegistered" class="App\Tests\Unit\Service\InscriptionServiceTest" classname="App.Tests.Unit.Service.InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" line="77" assertions="1" time="0.001515"/>
        <testcase name="testUnregisterParticipantSuccess" class="App\Tests\Unit\Service\InscriptionServiceTest" classname="App.Tests.Unit.Service.InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" line="102" assertions="3" time="0.001603"/>
        <testcase name="testUnregisterParticipantWhenNotRegistered" class="App\Tests\Unit\Service\InscriptionServiceTest" classname="App.Tests.Unit.Service.InscriptionServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\InscriptionServiceTest.php" line="135" assertions="1" time="0.000377"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\LieuServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\LieuServiceTest.php" tests="1" assertions="3" errors="0" warnings="0" failures="0" skipped="0" time="0.002731">
        <testcase name="testGetAllLieux" class="App\Tests\Unit\Service\LieuServiceTest" classname="App.Tests.Unit.Service.LieuServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\LieuServiceTest.php" line="25" assertions="3" time="0.002731"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" tests="10" assertions="31" errors="0" warnings="0" failures="0" skipped="0" time="0.009232">
        <testcase name="testCreateParticipant" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="47" assertions="9" time="0.005308"/>
        <testcase name="testUpdateParticipant" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="82" assertions="4" time="0.000518"/>
        <testcase name="testFindByPseudo" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="109" assertions="2" time="0.000417"/>
        <testcase name="testFindByMail" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="126" assertions="2" time="0.000384"/>
        <testcase name="testCheckUniqueFieldsWithNoConflicts" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="143" assertions="2" time="0.000388"/>
        <testcase name="testCheckUniqueFieldsWithConflicts" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="157" assertions="4" time="0.000782"/>
        <testcase name="testGetAllParticipants" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="183" assertions="2" time="0.000355"/>
        <testcase name="testToggleAdmin" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="199" assertions="2" time="0.000404"/>
        <testcase name="testDeleteParticipant" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="216" assertions="2" time="0.000328"/>
        <testcase name="testToggleActif" class="App\Tests\Unit\Service\ParticipantServiceTest" classname="App.Tests.Unit.Service.ParticipantServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\ParticipantServiceTest.php" line="232" assertions="2" time="0.000347"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" tests="6" assertions="14" errors="0" warnings="0" failures="0" skipped="0" time="0.014400">
        <testcase name="testGetAllSites" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="31" assertions="3" time="0.002632"/>
        <testcase name="testCreateSite" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="48" assertions="3" time="0.000264"/>
        <testcase name="testDeleteSiteSuccess" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="65" assertions="2" time="0.000700"/>
        <testcase name="testDeleteSiteInUse" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="83" assertions="2" time="0.000295"/>
        <testcase name="testUpdateSite" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="103" assertions="3" time="0.000818"/>
        <testcase name="testSearchByName" class="App\Tests\Unit\Service\SiteServiceTest" classname="App.Tests.Unit.Service.SiteServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SiteServiceTest.php" line="124" assertions="1" time="0.009691"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" tests="9" assertions="24" errors="0" warnings="0" failures="0" skipped="0" time="0.074571">
        <testcase name="testSetEtatBasedOnButtonEnregistrer" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="32" assertions="3" time="0.006319">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 41; private $time = 0.1032712; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 41; private $time = 0.1032712; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 41; private $time = 0.1032712; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4231   31556032   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 41; private $time = 0.1032712; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4231   31556032   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testSetEtatBasedOnButtonEnregistrer'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 41; private $time = 0.1032712; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.4234   31553776  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.4235   31571192  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.4243   31559432  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testSetEtatBasedOnButtonPublier" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="54" assertions="3" time="0.007054">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 42; private $time = 0.1095902; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 42; private $time = 0.1095902; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 42; private $time = 0.1095902; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4491   31584296   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 42; private $time = 0.1095902; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4491   31584296   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testSetEtatBasedOnButtonPublier'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 42; private $time = 0.1095902; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.4493   31585416  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.4495   31602832  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.4496   31603624  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testSetEtatBasedOnButtonUnknown" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="76" assertions="3" time="0.005974">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 43; private $time = 0.1166439; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 43; private $time = 0.1166439; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 43; private $time = 0.1166439; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4762   31628072   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 43; private $time = 0.1166439; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4763   31628072   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testSetEtatBasedOnButtonUnknown'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 43; private $time = 0.1166439; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.4765   31629192  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.4767   31646608  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.4768   31647400  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testFindFilteredSorties" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="95" assertions="3" time="0.006573">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 44; private $time = 0.1226183; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 44; private $time = 0.1226183; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 44; private $time = 0.1226183; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5018   31671848   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 44; private $time = 0.1226183; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5018   31671848   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testFindFilteredSorties'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 44; private $time = 0.1226183; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.5020   31672936  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.5022   31690352  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.5022   31691144  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testGetSortieWithParticipants" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="120" assertions="4" time="0.012514">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 45; private $time = 0.1291909; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 45; private $time = 0.1291909; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 45; private $time = 0.1291909; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5282   31717008   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 45; private $time = 0.1291909; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5282   31717008   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testGetSortieWithParticipants'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 45; private $time = 0.1291909; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.5284   31718112  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.5287   31735528  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.5288   31736320  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testFindAll" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="168" assertions="2" time="0.007733">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 46; private $time = 0.1417051; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 46; private $time = 0.1417051; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 46; private $time = 0.1417051; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5625   31858496   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 46; private $time = 0.1417051; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5625   31858496   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testFindAll'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 46; private $time = 0.1417051; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.5626   31859568  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.5628   31876984  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.5629   31877776  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testFindAllWithSubscribed" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="184" assertions="3" time="0.013309">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 47; private $time = 0.1494382; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 47; private $time = 0.1494382; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 47; private $time = 0.1494382; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5999   31902192   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 47; private $time = 0.1494382; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.5999   31902192   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testFindAllWithSubscribed'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 47; private $time = 0.1494382; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.6001   31903296  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.6002   31920712  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.6004   31921504  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testValidateDates" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="207" assertions="1" time="0.007693">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 48; private $time = 0.1627471; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 48; private $time = 0.1627471; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 48; private $time = 0.1627471; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.6444   31945936   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 48; private $time = 0.1627471; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.6444   31945936   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testValidateDates'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 48; private $time = 0.1627471; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.6446   31947008  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.6448   31964424  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.6449   31965216  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
        <testcase name="testValidateDatesWithPastDate" class="App\Tests\Unit\Service\SortieServiceTest" classname="App.Tests.Unit.Service.SortieServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php" line="221" assertions="2" time="0.007403">
          <system-out>
Deprecated: Creation of dynamic property App\Service\SortieService::$etatService is deprecated in C:\wamp64\www\sortir.com\src\Service\SortieService.php on line 20

Call Stack:
    0.0230    8104400   1. {main}() C:\wamp64\www\sortir.com\phpunit.phar:0
    0.2178   25230768   2. PHPUnit\TextUI\Command::main($exit = ???) C:\wamp64\www\sortir.com\phpunit.phar:2538
    0.2178   25230880   3. PHPUnit\TextUI\Command-&gt;run($argv = [0 =&gt; 'phpunit.phar', 1 =&gt; '--testsuite=Unit'], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:96
    0.2539   26952336   4. PHPUnit\TextUI\TestRunner-&gt;run($suite = class PHPUnit\Framework\TestSuite { protected $backupGlobals = NULL; protected $backupStaticAttributes = NULL; protected $runTestInSeparateProcess = FALSE; protected $name = ''; protected $groups = ['default' =&gt; [...]]; protected $tests = [0 =&gt; class PHPUnit\Framework\TestSuite { ... }]; protected $numTests = 77; protected $testCase = FALSE; protected $foundClasses = []; protected $providedTests = NULL; protected $requiredTests = NULL; private $beStrictAboutChangesToGlobalState = NULL; private $iteratorFilter = NULL; private $declaredClassesPointer = 1332; private $warnings = [] }, $arguments = ['extensions' =&gt; [], 'listGroups' =&gt; FALSE, 'listSuites' =&gt; FALSE, 'listTests' =&gt; FALSE, 'listTestsXml' =&gt; FALSE, 'loader' =&gt; NULL, 'useDefaultConfiguration' =&gt; TRUE, 'loadedExtensions' =&gt; [], 'unavailableExtensions' =&gt; [], 'notLoadedExtensions' =&gt; [], 'testsuite' =&gt; 'Unit', 'testSuffixes' =&gt; [0 =&gt; 'Test.php', 1 =&gt; '.phpt'], 'configuration' =&gt; 'C:\\wamp64\\www\\sortir.com\\phpunit.xml', 'configurationObject' =&gt; class PHPUnit\TextUI\XmlConfiguration\Configuration { private $filename = 'C:\\wamp64\\www\\sortir.com\\phpunit.xml'; private $validationResult = class PHPUnit\Util\Xml\ValidationResult { ... }; private $extensions = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $codeCoverage = class PHPUnit\TextUI\XmlConfiguration\CodeCoverage\CodeCoverage { ... }; private $groups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $testdoxGroups = class PHPUnit\TextUI\XmlConfiguration\Groups { ... }; private $listeners = class PHPUnit\TextUI\XmlConfiguration\ExtensionCollection { ... }; private $logging = class PHPUnit\TextUI\XmlConfiguration\Logging\Logging { ... }; private $php = class PHPUnit\TextUI\XmlConfiguration\Php { ... }; private $phpunit = class PHPUnit\TextUI\XmlConfiguration\PHPUnit { ... }; private $testSuite = class PHPUnit\TextUI\XmlConfiguration\TestSuiteCollection { ... } }, 'stderr' =&gt; FALSE, 'columns' =&gt; 80], $warnings = [], $exit = TRUE) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/Command.php:127
    0.3001   27038992   5. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testValidateDates' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 49; private $time = 0.17044; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/TextUI/TestRunner.php:479
    0.3005   27041448   6. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testValidateDates' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 49; private $time = 0.17044; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.4224   31537472   7. PHPUnit\Framework\TestSuite-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testValidateDates' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 49; private $time = 0.17044; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.6839   31989648   8. PHPUnit\Framework\TestCase-&gt;run($result = class PHPUnit\Framework\TestResult { private $passed = ['App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesForInactiveParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCancelOngoingSortiesForInactiveOrganizersNoEtatAnnule' =&gt; [...], 'App\\Tests\\Unit\\Service\\CleanupServiceTest::testCleanupFinishedSortiesWithZeroResults' =&gt; [...], 'App\\Tests\\Unit\\Service\\EtatServiceTest::testGetAllEtats' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testGetUploadDirectory' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidJpeg' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidPng' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithValidWebp' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTooLargeFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithInvalidMimeType' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testIsValidImageFileWithTextFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadFileException' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testUploadWithOldFilenameDeletion' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNullFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithEmptyFilename' =&gt; [...], 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest::testDeleteWithNonExistentFile' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenSortieNotOpen' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testRegisterParticipantWhenAlreadyRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\InscriptionServiceTest::testUnregisterParticipantWhenNotRegistered' =&gt; [...], 'App\\Tests\\Unit\\Service\\LieuServiceTest::testGetAllLieux' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCreateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testUpdateParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByPseudo' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testFindByMail' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithNoConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testCheckUniqueFieldsWithConflicts' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testGetAllParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleAdmin' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testDeleteParticipant' =&gt; [...], 'App\\Tests\\Unit\\Service\\ParticipantServiceTest::testToggleActif' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testGetAllSites' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testCreateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteSuccess' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testDeleteSiteInUse' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testUpdateSite' =&gt; [...], 'App\\Tests\\Unit\\Service\\SiteServiceTest::testSearchByName' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonEnregistrer' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonPublier' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testSetEtatBasedOnButtonUnknown' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindFilteredSorties' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testGetSortieWithParticipants' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAll' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testFindAllWithSubscribed' =&gt; [...], 'App\\Tests\\Unit\\Service\\SortieServiceTest::testValidateDates' =&gt; [...]]; private $passedTestClasses = [0 =&gt; 'App\\Tests\\Unit\\Service\\CleanupServiceTest', 1 =&gt; 'App\\Tests\\Unit\\Service\\EtatServiceTest', 2 =&gt; 'App\\Tests\\Unit\\Service\\ImageUploadServiceTest', 3 =&gt; 'App\\Tests\\Unit\\Service\\InscriptionServiceTest', 4 =&gt; 'App\\Tests\\Unit\\Service\\LieuServiceTest', 5 =&gt; 'App\\Tests\\Unit\\Service\\ParticipantServiceTest', 6 =&gt; 'App\\Tests\\Unit\\Service\\SiteServiceTest']; private $currentTestSuiteFailed = FALSE; private $errors = []; private $failures = []; private $warnings = []; private $notImplemented = []; private $risky = []; private $skipped = []; private $listeners = [0 =&gt; class PHPUnit\Runner\TestListenerAdapter { ... }, 1 =&gt; class PHPUnit\TextUI\DefaultResultPrinter { ... }, 2 =&gt; class PHPUnit\Util\TestDox\HtmlResultPrinter { ... }, 3 =&gt; class PHPUnit\Util\TestDox\TextResultPrinter { ... }, 4 =&gt; class PHPUnit\Util\Log\JUnit { ... }]; private $runTests = 49; private $time = 0.17044; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestSuite.php:511
    0.6839   31989648   9. PHPUnit\Framework\TestResult-&gt;run($test = class App\Tests\Unit\Service\SortieServiceTest { protected $backupGlobals = NULL; protected $backupGlobalsExcludeList = []; protected $backupGlobalsBlacklist = []; protected $backupStaticAttributes = NULL; protected $backupStaticAttributesExcludeList = []; protected $backupStaticAttributesBlacklist = []; protected $runTestInSeparateProcess = FALSE; protected $preserveGlobalState = TRUE; protected $providedTests = [0 =&gt; class PHPUnit\Framework\ExecutionOrderDependency { ... }]; private ${PHPUnit\Framework\TestCase}runClassInSeparateProcess = NULL; private ${PHPUnit\Framework\TestCase}inIsolation = FALSE; private ${PHPUnit\Framework\TestCase}data = []; private ${PHPUnit\Framework\TestCase}dataName = ''; private ${PHPUnit\Framework\TestCase}expectedException = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessage = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionMessageRegExp = NULL; private ${PHPUnit\Framework\TestCase}expectedExceptionCode = NULL; private ${PHPUnit\Framework\TestCase}name = 'testValidateDatesWithPastDate'; private ${PHPUnit\Framework\TestCase}dependencies = []; private ${PHPUnit\Framework\TestCase}dependencyInput = []; private ${PHPUnit\Framework\TestCase}iniSettings = []; private ${PHPUnit\Framework\TestCase}locale = []; private ${PHPUnit\Framework\TestCase}mockObjects = [0 =&gt; class Mock_SortieRepository_dd2d1d4b { ... }, 1 =&gt; class Mock_EtatService_99e4ab5d { ... }]; private ${PHPUnit\Framework\TestCase}mockObjectGenerator = NULL; private ${PHPUnit\Framework\TestCase}status = -1; private ${PHPUnit\Framework\TestCase}statusMessage = ''; private ${PHPUnit\Framework\TestCase}numAssertions = 0; private ${PHPUnit\Framework\TestCase}result = class PHPUnit\Framework\TestResult { private $passed = [...]; private $passedTestClasses = [...]; private $currentTestSuiteFailed = FALSE; private $errors = [...]; private $failures = [...]; private $warnings = [...]; private $notImplemented = [...]; private $risky = [...]; private $skipped = [...]; private $listeners = [...]; private $runTests = 49; private $time = 0.17044; private $codeCoverage = NULL; private $convertDeprecationsToExceptions = FALSE; private $convertErrorsToExceptions = TRUE; private $convertNoticesToExceptions = TRUE; private $convertWarningsToExceptions = TRUE; private $stop = FALSE; private $stopOnError = FALSE; private $stopOnFailure = FALSE; private $stopOnWarning = FALSE; private $beStrictAboutTestsThatDoNotTestAnything = TRUE; private $beStrictAboutOutputDuringTests = FALSE; private $beStrictAboutTodoAnnotatedTests = FALSE; private $beStrictAboutResourceUsageDuringSmallTests = FALSE; private $enforceTimeLimit = FALSE; private $forceCoversAnnotation = FALSE; private $timeoutForSmallTests = 1; private $timeoutForMediumTests = 10; private $timeoutForLargeTests = 60; private $stopOnRisky = FALSE; private $stopOnIncomplete = FALSE; private $stopOnSkipped = FALSE; private $lastTestFailed = FALSE; private $defaultTimeLimit = 1; private $stopOnDefect = FALSE; private $registerMockObjectsFromTestArgumentsRecursively = FALSE }; private ${PHPUnit\Framework\TestCase}testResult = NULL; private ${PHPUnit\Framework\TestCase}output = ''; private ${PHPUnit\Framework\TestCase}outputExpectedRegex = NULL; private ${PHPUnit\Framework\TestCase}outputExpectedString = NULL; private ${PHPUnit\Framework\TestCase}outputCallback = FALSE; private ${PHPUnit\Framework\TestCase}outputBufferingActive = TRUE; private ${PHPUnit\Framework\TestCase}outputBufferingLevel = 1; private ${PHPUnit\Framework\TestCase}outputRetrievedForAssertion = FALSE; private ${PHPUnit\Framework\TestCase}snapshot = NULL; private ${PHPUnit\Framework\TestCase}prophet = NULL; private ${PHPUnit\Framework\TestCase}beStrictAboutChangesToGlobalState = NULL; private ${PHPUnit\Framework\TestCase}registerMockObjectsFromTestArgumentsRecursively = FALSE; private ${PHPUnit\Framework\TestCase}warnings = []; private ${PHPUnit\Framework\TestCase}groups = [0 =&gt; 'default']; private ${PHPUnit\Framework\TestCase}doesNotPerformAssertions = FALSE; private ${PHPUnit\Framework\TestCase}customComparators = []; private ${PHPUnit\Framework\TestCase}doubledTypes = [0 =&gt; 'App\\Repository\\SortieRepository', 1 =&gt; 'App\\Service\\EtatService']; private App\Service\SortieService $sortieService = *uninitialized*; private PHPUnit\Framework\MockObject\MockObject $sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }; private PHPUnit\Framework\MockObject\MockObject $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL } }) phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:780
    0.6842   31990752  10. PHPUnit\Framework\TestCase-&gt;runBare() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestResult.php:589
    0.6845   32008168  11. App\Tests\Unit\Service\SortieServiceTest-&gt;setUp() phar://C:/wamp64/www/sortir.com/phpunit.phar/phpunit/Framework/TestCase.php:984
    0.6845   32008960  12. App\Service\SortieService-&gt;__construct($sortieRepository = class Mock_SortieRepository_dd2d1d4b { private readonly string ${Doctrine\ORM\EntityRepository}entityName = *uninitialized*; private readonly Doctrine\ORM\EntityManagerInterface ${Doctrine\ORM\EntityRepository}em = *uninitialized*; private readonly Doctrine\ORM\Mapping\ClassMetadata ${Doctrine\ORM\EntityRepository}class = *uninitialized*; private ?Doctrine\ORM\EntityRepository ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}repository = NULL; private readonly Doctrine\Persistence\ManagerRegistry ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}registry = *uninitialized*; private readonly string ${Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryProxy}entityClass = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }, $etatService = class Mock_EtatService_99e4ab5d { private readonly App\Repository\EtatRepository ${App\Service\EtatService}etatRepository = *uninitialized*; private $__phpunit_originalObject = NULL; private $__phpunit_returnValueGeneration = TRUE; private $__phpunit_invocationMocker = NULL }) C:\wamp64\www\sortir.com\tests\Unit\Service\SortieServiceTest.php:26

</system-out>
        </testcase>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" tests="22" assertions="42" errors="0" warnings="0" failures="0" skipped="0" time="0.018307">
        <testcase name="testCreateParticipantCSVSuccess" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="32" assertions="3" time="0.006359"/>
        <testcase name="testCreateParticipantCSVWithInvalidSiteName" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="56" assertions="2" time="0.000873"/>
        <testcase name="testCreateParticipantCSVWithEmptySiteName" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="73" assertions="1" time="0.000375"/>
        <testcase name="testCreateParticipantCSVWithParticipantCreationError" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="85" assertions="3" time="0.000605"/>
        <testcase name="testCheckCsvValidityWithValidHeaders" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="111" assertions="1" time="0.000605"/>
        <testcase name="testCheckCsvValidityWithIncorrectHeaders" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="123" assertions="1" time="0.000354"/>
        <testcase name="testCheckCsvValidityWithIncorrectColumnNumber" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="135" assertions="1" time="0.000442"/>
        <testcase name="testCheckParticipantValiditySuccess" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="149" assertions="3" time="0.002369"/>
        <testcase name="testCheckParticipantValidityWithMissingUsername" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="177" assertions="1" time="0.000287"/>
        <testcase name="testCheckParticipantValidityWithTakenPseudo" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="189" assertions="2" time="0.000416"/>
        <testcase name="testCheckParticipantValidityWithMissingNom" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="207" assertions="2" time="0.000384"/>
        <testcase name="testCheckParticipantValidityWithMissingPrenom" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="224" assertions="2" time="0.000387"/>
        <testcase name="testCheckParticipantValidityWithShortPassword" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="241" assertions="2" time="0.000357"/>
        <testcase name="testCheckParticipantValidityWithMissingPassword" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="258" assertions="2" time="0.000561"/>
        <testcase name="testCheckParticipantValidityWithInvalidAdminField" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="275" assertions="2" time="0.000364"/>
        <testcase name="testCheckParticipantValidityWithMissingAdminField" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="292" assertions="2" time="0.000337"/>
        <testcase name="testCheckParticipantValidityWithInvalidActifField" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="309" assertions="2" time="0.000414"/>
        <testcase name="testCheckParticipantValidityWithMissingActifField" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="326" assertions="2" time="0.000633"/>
        <testcase name="testCheckParticipantValidityWithInvalidEmailFormat" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="343" assertions="2" time="0.000457"/>
        <testcase name="testCheckParticipantValidityWithTakenEmail" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="360" assertions="2" time="0.000559"/>
        <testcase name="testCheckParticipantValidityWithMissingEmail" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="383" assertions="2" time="0.000649"/>
        <testcase name="testCheckParticipantValidityWithMissingSiteName" class="App\Tests\Unit\Service\UserImportServiceTest" classname="App.Tests.Unit.Service.UserImportServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\UserImportServiceTest.php" line="400" assertions="2" time="0.000520"/>
      </testsuite>
      <testsuite name="App\Tests\Unit\Service\VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" tests="6" assertions="15" errors="0" warnings="0" failures="0" skipped="0" time="0.007497">
        <testcase name="testGetAllVilles" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="31" assertions="3" time="0.003211"/>
        <testcase name="testCreateVille" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="48" assertions="4" time="0.000373"/>
        <testcase name="testDeleteVilleSuccess" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="67" assertions="2" time="0.000997"/>
        <testcase name="testDeleteVilleInUse" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="85" assertions="2" time="0.000579"/>
        <testcase name="testUpdateVille" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="105" assertions="3" time="0.000915"/>
        <testcase name="testSearchByName" class="App\Tests\Unit\Service\VilleServiceTest" classname="App.Tests.Unit.Service.VilleServiceTest" file="C:\wamp64\www\sortir.com\tests\Unit\Service\VilleServiceTest.php" line="131" assertions="1" time="0.001422"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
